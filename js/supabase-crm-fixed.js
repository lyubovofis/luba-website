// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –î–õ–Ø –†–ê–ë–û–¢–´ –° SUPABASE –ë–ï–ó –ü–†–û–ë–õ–ï–ú
// –≠—Ç–æ—Ç –∫–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç —á–∞—Å—Ç—å –≤ quiz/index.html

// Supabase Configuration - –£–ñ–ï –ù–ê–°–¢–†–û–ï–ù–û!
const SUPABASE_URL = 'https://rntranckosfsnaakjrqh.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJudHJhbmNrb3Nmc25hYWtqcnFoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgyOTUyNTIsImV4cCI6MjA3Mzg3MTI1Mn0.Nme48al5xSVPlD4l40z6ZPwTkSL0uC3JQ300IZu7WBA';

// Initialize Supabase client
const { createClient } = supabase;
const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞
async function saveLeadToSupabase(leadData) {
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Supabase:', leadData);
        
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ quiz_leads (–æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–≤–∏–∑–æ–≤)
        const quizData = {
            name: leadData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            email: leadData.email || null, // –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            phone: leadData.whatsapp || leadData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            age: leadData.age ? parseInt(leadData.age) : null,
            quiz_type: 'money_blocks',
            answers: leadData.answers || {},
            result: leadData.quiz_result || document.getElementById('resultTitle')?.textContent || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
            utm_source: leadData.utm_source || null,
            utm_medium: leadData.utm_medium || null,
            utm_campaign: leadData.utm_campaign || null,
            main_block: leadData.main_block || document.getElementById('resultTitle')?.textContent || null,
            quiz_answers: leadData.answers || {}
        };
        
        const { data: quizInsert, error: quizError } = await supabaseClient
            .from('quiz_leads')
            .insert(quizData)
            .select();
        
        if (quizError) {
            console.error('–û—à–∏–±–∫–∞ quiz_leads:', quizError);
        } else {
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ quiz_leads:', quizInsert);
        }
        
        // 2. –î—É–±–ª–∏—Ä—É–µ–º –≤ crm_leads –¥–ª—è –æ–±—â–µ–π CRM
        const crmData = {
            name: leadData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            email: leadData.email || null,
            phone: leadData.whatsapp || leadData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            age: leadData.age ? parseInt(leadData.age) : null,
            source: 'Quiz: Money Blocks',
            utm_source: leadData.utm_source || null,
            utm_medium: leadData.utm_medium || null,
            utm_campaign: leadData.utm_campaign || null,
            stage: 'new',
            status: 'new',
            amount: 0,
            hot: false,
            main_block: leadData.main_block || document.getElementById('resultTitle')?.textContent || null,
            quiz_answers: leadData.answers || {},
            note: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–≤–∏–∑–∞: ${leadData.quiz_result || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`
        };
        
        const { data: crmInsert, error: crmError } = await supabaseClient
            .from('crm_leads')
            .insert(crmData)
            .select();
        
        if (crmError) {
            console.error('–û—à–∏–±–∫–∞ crm_leads:', crmError);
        } else {
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ crm_leads:', crmInsert);
        }
        
        // 3. –ï—Å–ª–∏ –æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        if (!quizError || !crmError) {
            console.log('üéâ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showSuccessNotification(leadData.name);
            
            return true;
        }
        
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        saveToLocalStorage(leadData);
        
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
function saveToLocalStorage(leadData) {
    try {
        const leads = JSON.parse(localStorage.getItem('crmLeads') || '[]');
        leads.push({
            ...leadData,
            saved_at: new Date().toISOString(),
            synced: false
        });
        localStorage.setItem('crmLeads', JSON.stringify(leads));
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessNotification(name) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #10b981;
        color: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    notification.innerHTML = `
        <strong>‚úÖ –£—Å–ø–µ—à–Ω–æ!</strong><br>
        –õ–∏–¥ ${name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–∏—Ç—å –≤ <style>)
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –¢–ï–°–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testSupabaseConnection() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        const { data, error } = await supabaseClient
            .from('crm_leads')
            .select('count')
            .limit(1);
        
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            return false;
        } else {
            console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            return true;
        }
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
async function syncUnsavedLeads() {
    const unsavedLeads = JSON.parse(localStorage.getItem('crmLeads') || '[]')
        .filter(lead => !lead.synced);
    
    if (unsavedLeads.length === 0) return;
    
    console.log(`üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${unsavedLeads.length} –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤...`);
    
    for (const lead of unsavedLeads) {
        const success = await saveLeadToSupabase(lead);
        if (success) {
            lead.synced = true;
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
    const allLeads = JSON.parse(localStorage.getItem('crmLeads') || '[]');
    localStorage.setItem('crmLeads', JSON.stringify(allLeads));
}

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connected = await testSupabaseConnection();
    
    if (connected) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏–¥—ã
        await syncUnsavedLeads();
    } else {
        console.warn('‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.SupabaseCRM = {
    save: saveLeadToSupabase,
    test: testSupabaseConnection,
    sync: syncUnsavedLeads
};